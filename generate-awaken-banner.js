/**
 * RUNES Analytics Pro - Gerador de Banners Neural Awaken
 * 
 * Este script gera banners personalizados para a plataforma RUNES Analytics Pro
 * utilizando modelos de IA para gera√ß√£o de imagens e integra√ß√£o com QR codes.
 * 
 * A integra√ß√£o com o modelo Stable Diffusion XL local √© feita atrav√©s de
 * uma API REST que deve estar rodando localmente em http://localhost:7860
 */

import { generateImage, generateQR, overlayQRonImage, exportImage } from './neural-tools.js';

// Configura√ß√µes do banner
const bannerPrompt = {
  prompt: `Futuristic sci-fi banner with a deep-space neural theme. A glowing fractal sigil pulsates in the center, 
  surrounded by streams of digital data visualized as cyan and purple energy flows. 
  Bitcoin symbols are subtly visible in the background, with faint Bitcoin runes etched into the neural structure. 
  The entire scene has a cyberpunk aesthetic with holographic details and technological patterns.`,
  negative_prompt: "text, watermark, signature, blurry, distorted, low quality, grainy",
  style: "cyberpunk, high-tech, glowing neon, dark background, detailed, 8k, sharp focus",
  resolution: "1920x1080",
  model: "dreamshaperXL",
  sampler: "DPM++ 2M Karras",
  steps: 40,
  cfg_scale: 7.5,
  seed: -1 // -1 para seed aleat√≥ria
};

// Configura√ß√µes do QR code
const qrConfig = {
  url: "https://thierrybtc.github.io/runes-analytics-pro/api-demo.html?lang=auto",
  signature: "ü¶â Node Owl :: Thierry BTC",
  style: "neural-glow",
  overlay: true,
  position: "bottom-right",
  size: 200,
  margin: 30,
  colorDark: "#00ffff",
  colorLight: "#000000",
  logoUrl: "assets/images/logo-icon.png"
};

/**
 * Gera um banner neural com QR code integrado
 * @param {Object} config - Configura√ß√µes personalizadas (opcional)
 * @returns {Promise<Object>} - Objeto com caminhos para os arquivos gerados
 */
async function generateAwakenBanner(config = {}) {
  try {
    console.log("üß† Iniciando gera√ß√£o de banner neural...");
    
    // Mescla configura√ß√µes personalizadas com as padr√µes
    const finalPrompt = { ...bannerPrompt, ...config.prompt };
    const finalQrConfig = { ...qrConfig, ...config.qr };
    
    // Personaliza√ß√£o para idioma, se fornecido
    if (config.language) {
      finalQrConfig.url = finalQrConfig.url.replace('lang=auto', `lang=${config.language}`);
      
      if (config.language === 'pt') {
        finalQrConfig.signature = "ü¶â N√≥ Coruja :: Thierry BTC";
      }
    }
    
    // Gera a imagem base com modelo de difus√£o
    console.log("üé® Gerando imagem base com Stable Diffusion XL...");
    const img = await generateImage(finalPrompt);
    
    // Verifica se a gera√ß√£o de imagem foi bem-sucedida
    if (!img || !img.buffer) {
      throw new Error("Falha ao gerar imagem base. Verifique se a API local est√° rodando.");
    }
    
    // Gera o QR code com estilo customizado
    console.log("üì± Gerando QR code estilizado...");
    const qr = await generateQR(finalQrConfig);
    
    // Sobrep√µe o QR code na imagem
    console.log("üîÑ Aplicando QR code na imagem...");
    const final = await overlayQRonImage(img, qr, finalQrConfig.position);
    
    // Define o nome do arquivo com base no idioma e timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const langSuffix = config.language ? `-${config.language}` : '';
    const fileName = `awaken-neural-banner${langSuffix}-${timestamp}`;
    
    // Op√ß√µes de exporta√ß√£o
    const exportOptions = {
      folder: "./media/awaken-banners",
      name: fileName,
      formats: ["png", "webp"],
      quality: 90 // apenas para webp
    };
    
    // Exporta a imagem final
    console.log("üíæ Exportando banner final...");
    const exportResult = await exportImage(final, exportOptions);
    
    console.log(`‚úÖ Banner neural gerado com sucesso!`);
    console.log(`üìÇ Arquivos salvos em:`);
    exportResult.files.forEach(file => console.log(`   - ${file}`));
    
    return exportResult;
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do banner:", error);
    throw error;
  }
}

/**
 * Gera variantes de banners para diferentes idiomas
 */
async function generateLanguageVariants() {
  try {
    console.log("üåê Gerando variantes de banners para diferentes idiomas...");
    
    // Gera variante em ingl√™s
    await generateAwakenBanner({
      language: 'en',
      prompt: {
        prompt: bannerPrompt.prompt + " Text overlay: 'RUNES Analytics Pro - Advanced Neural Mesh'"
      }
    });
    
    // Gera variante em portugu√™s
    await generateAwakenBanner({
      language: 'pt',
      prompt: {
        prompt: bannerPrompt.prompt + " Text overlay: 'RUNES Analytics Pro - Malha Neural Avan√ßada'"
      }
    });
    
    console.log("üéâ Todas as variantes de idioma foram geradas com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro ao gerar variantes de idioma:", error);
  }
}

// Se executado diretamente via Node.js
if (import.meta.url === import.meta.main) {
  // Verifica se deve gerar variantes de idioma
  const args = process.argv.slice(2);
  const generateVariants = args.includes('--variants') || args.includes('-v');
  
  if (generateVariants) {
    generateLanguageVariants();
  } else {
    generateAwakenBanner();
  }
}

// Exporta as fun√ß√µes para uso em outros m√≥dulos
export { generateAwakenBanner, generateLanguageVariants }; 