// Script de navega√ß√£o aprimorado - navegacao-v2.js
console.log("‚úÖ Inicializando sistema de navega√ß√£o v2...");

document.addEventListener('DOMContentLoaded', function() {
    console.log("‚úÖ DOM carregado, configurando navega√ß√£o...");
    
    // Configurar navega√ß√£o por se√ß√µes
    setupNavigation();
    
    // Mostrar se√ß√£o padr√£o
    mostrarSecao('dashboard-section');
});

function setupNavigation() {
    console.log("‚úÖ Configurando links de navega√ß√£o");
    
    // Adicionar event listeners para todos os links de menu
    const menuLinks = document.querySelectorAll('.sidebar-menu a, .nav-link');
    console.log(`üìå Encontrados ${menuLinks.length} links no menu`);
    
    menuLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            console.log(`üîó Link clicado: ${this.textContent.trim()} - href: ${this.getAttribute('href')}`);
            
            // Obter se√ß√£o alvo do atributo href ou data-target
            const targetId = this.getAttribute('href')?.replace('#', '') || 
                           this.getAttribute('data-target');
            
            if (targetId) {
                console.log(`üéØ Target ID: ${targetId}`);
                
                // Marcar link atual como ativo
                menuLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // Mostrar a se√ß√£o correspondente
                mostrarSecao(targetId);
            }
        });
    });
    
    // Adicionar event listener para bot√£o de toggle do sidebar
    const sidebarToggle = document.getElementById('sidebar-toggle');
    if (sidebarToggle) {
        console.log("‚úÖ Configurando bot√£o de toggle do sidebar");
        sidebarToggle.addEventListener('click', function() {
            console.log("üîÑ Toggle sidebar clicado");
            const sidebar = document.querySelector('.sidebar');
            if (sidebar) {
                sidebar.classList.toggle('collapsed');
                document.querySelector('.main-content').classList.toggle('expanded');
            }
        });
    } else {
        console.warn("‚ö†Ô∏è Bot√£o de toggle do sidebar n√£o encontrado");
    }
}

function mostrarSecao(sectionId) {
    console.log(`üîç Mostrando se√ß√£o: ${sectionId}`);
    
    // Mapear IDs de se√ß√£o para IDs reais usados no c√≥digo
    const sectionMappings = {
        'dashboard': 'dashboard-section',
        'sentiment': 'sentiment-section',
        'whale-tracker': 'whale-tracker-section',
        'technical-analysis': 'technical-analysis-section',
        'ranking': 'ranking-section',
        'gamification': 'gamification-section',
        'alerts': 'alerts-section',
        'market-data': 'market-data-section',
        'settings': 'settings-section'
    };
    
    // Obter ID correto da se√ß√£o
    const targetId = sectionMappings[sectionId] || sectionId;
    console.log(`üéØ ID mapeado: ${targetId}`);
    
    // Obter todas as se√ß√µes de conte√∫do
    const contentSections = document.querySelectorAll('.content-section');
    console.log(`üìå Encontradas ${contentSections.length} se√ß√µes de conte√∫do`);
    
    // Esconder todas as se√ß√µes
    contentSections.forEach(section => {
        section.classList.add('hidden');
    });
    
    // Mostrar se√ß√£o alvo
    const targetSection = document.getElementById(targetId);
    
    if (targetSection) {
        console.log(`‚úÖ Se√ß√£o ${targetId} encontrada, exibindo...`);
        targetSection.classList.remove('hidden');
        
        // Atualizar estado global da aplica√ß√£o
        if (window.appState) {
            window.appState.currentSection = sectionId;
        }
        
        // Inicializar componentes espec√≠ficos da se√ß√£o conforme necess√°rio
        initializeComponents(targetId);
    } else {
        console.error(`‚ùå Se√ß√£o com ID ${targetId} n√£o encontrada`);
        
        // Mostrar a primeira se√ß√£o dispon√≠vel como fallback
        if (contentSections.length > 0) {
            console.warn(`‚ö†Ô∏è Usando primeira se√ß√£o como fallback: ${contentSections[0].id}`);
            contentSections[0].classList.remove('hidden');
        }
    }
    
    // Atualizar t√≠tulo da p√°gina
    updatePageTitle(targetId);
}

function initializeComponents(sectionId) {
    console.log(`üîÑ Inicializando componentes para a se√ß√£o: ${sectionId}`);
    
    // Verificar se o ComponentManager est√° dispon√≠vel
    if (window.componentManager) {
        switch(sectionId) {
            case 'sentiment-section':
                window.componentManager.initComponent('RunesSentimentAnalysis')
                    .then(instance => {
                        console.log('üìä Atualizando an√°lise de sentimentos...');
                        // For√ßar atualiza√ß√£o dos dados
                        if (instance && typeof instance.loadSentimentData === 'function') {
                            instance.loadSentimentData().then(() => {
                                console.log('‚úÖ Dados de sentimento atualizados');
                            });
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Componente de an√°lise de sentimento n√£o dispon√≠vel:', error);
                    });
                break;
                
            case 'whale-tracker-section':
                window.componentManager.initComponent('RunesWhaleTracker')
                    .then(instance => {
                        console.log('üê≥ Atualizando rastreador de baleias...');
                        // Atualizar dados do rastreador de baleias
                        if (instance && typeof instance.updateUI === 'function') {
                            instance.updateUI();
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Componente de rastreador de baleias n√£o dispon√≠vel:', error);
                    });
                break;
                
            case 'technical-analysis-section':
                window.componentManager.initComponent('RunesAnalysis')
                    .then(instance => {
                        console.log('üìà Carregando an√°lise t√©cnica...');
                        // Inicializar gr√°ficos ou carregar novos dados
                        if (instance && typeof instance.updateTokenInfo === 'function') {
                            instance.updateTokenInfo();
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Componente de an√°lise t√©cnica n√£o dispon√≠vel:', error);
                    });
                break;
                
            case 'gamification-section':
                window.componentManager.initComponent('RunesGamification')
                    .then(instance => {
                        console.log('üéÆ Atualizando sistema de gamifica√ß√£o...');
                        // Atualizar dados de gamifica√ß√£o
                        if (instance && typeof instance.updateXPProgress === 'function') {
                            instance.updateXPProgress();
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Componente de gamifica√ß√£o n√£o dispon√≠vel:', error);
                    });
                break;
                
            case 'ranking-section':
                if (window.runesRanking) {
                    console.log('üèÜ Atualizando ranking de RUNES...');
                    // Atualizar rankings
                    window.runesRanking.updateRanking();
                } else if (typeof initRunesRanking === 'function') {
                    console.log('üèÜ Inicializando ranking via fun√ß√£o global...');
                    initRunesRanking();
                } else {
                    console.error('‚ùå Componente de ranking n√£o encontrado');
                }
                break;
                
            case 'alerts-section':
                console.log('üîî Carregando sistema de alertas...');
                // Atualizar lista de alertas
                if (typeof updateAlertsList === 'function') {
                    updateAlertsList();
                } else {
                    console.error('‚ùå Fun√ß√£o updateAlertsList n√£o encontrada');
                }
                break;
                
            case 'dashboard-section':
                console.log('üìä Atualizando dashboard...');
                if (typeof updateDashboardMetrics === 'function') {
                    updateDashboardMetrics();
                }
                if (typeof createMockChart === 'function') {
                    createMockChart();
                }
                break;
                
            case 'market-data-section':
                console.log('üìä Carregando dados de mercado...');
                if (typeof loadMarketData === 'function') {
                    loadMarketData();
                }
                break;
                
            default:
                console.log(`‚ÑπÔ∏è Sem inicializa√ß√£o espec√≠fica para se√ß√£o: ${sectionId}`);
        }
    } else {
        // Fallback para o m√©todo antigo quando o ComponentManager n√£o est√° dispon√≠vel
    switch(sectionId) {
        case 'sentiment-section':
            if (window.runesSentiment) {
                console.log('üìä Atualizando an√°lise de sentimentos...');
                // For√ßar atualiza√ß√£o dos dados
                window.runesSentiment.loadSentimentData().then(() => {
                    console.log('‚úÖ Dados de sentimento atualizados');
                });
            } else {
                console.error('‚ùå Componente runesSentiment n√£o encontrado');
            }
            break;
            
        case 'whale-tracker-section':
            if (window.whaleTracker) {
                console.log('üê≥ Atualizando rastreador de baleias...');
                // Atualizar dados do rastreador de baleias
                window.whaleTracker.updateUI();
            } else {
                console.error('‚ùå Componente whaleTracker n√£o encontrado');
            }
            break;
            
        case 'technical-analysis-section':
            if (window.runesAnalysis) {
                console.log('üìà Carregando an√°lise t√©cnica...');
                // Inicializar gr√°ficos ou carregar novos dados
                window.runesAnalysis.updateTokenInfo();
            } else {
                console.error('‚ùå Componente runesAnalysis n√£o encontrado');
            }
            break;
            
        case 'ranking-section':
            if (window.runesRanking) {
                console.log('üèÜ Atualizando ranking de RUNES...');
                // Atualizar rankings
                window.runesRanking.updateRanking();
            } else if (typeof initRunesRanking === 'function') {
                console.log('üèÜ Inicializando ranking via fun√ß√£o global...');
                initRunesRanking();
            } else {
                console.error('‚ùå Componente de ranking n√£o encontrado');
            }
            break;
            
        case 'gamification-section':
            if (window.runesGamification) {
                console.log('üéÆ Atualizando sistema de gamifica√ß√£o...');
                // Atualizar dados de gamifica√ß√£o
                window.runesGamification.updateXPProgress();
            } else {
                console.error('‚ùå Componente runesGamification n√£o encontrado');
            }
            break;
            
        case 'alerts-section':
            console.log('üîî Carregando sistema de alertas...');
            // Atualizar lista de alertas
            if (typeof updateAlertsList === 'function') {
                updateAlertsList();
            } else {
                console.error('‚ùå Fun√ß√£o updateAlertsList n√£o encontrada');
            }
            break;
            
        case 'dashboard-section':
            console.log('üìä Atualizando dashboard...');
            if (typeof updateDashboardMetrics === 'function') {
                updateDashboardMetrics();
            }
            if (typeof createMockChart === 'function') {
                createMockChart();
            }
            break;
            
        case 'market-data-section':
            console.log('üìä Carregando dados de mercado...');
            if (typeof loadMarketData === 'function') {
                loadMarketData();
            }
            break;
        }
    }
    
    // Disparar evento personalizado para notificar outros componentes
    document.dispatchEvent(new CustomEvent('sectionChanged', { 
        detail: { section: sectionId }
    }));
}

function updatePageTitle(sectionId) {
    // Mapear IDs para t√≠tulos amig√°veis
    const sectionTitles = {
        'dashboard-section': 'Dashboard | RUNES Analytics Pro',
        'sentiment-section': 'An√°lise de Sentimentos | RUNES Analytics Pro',
        'whale-tracker-section': 'Rastreador de Baleias | RUNES Analytics Pro',
        'technical-analysis-section': 'An√°lise T√©cnica | RUNES Analytics Pro',
        'ranking-section': 'Ranking RUNES | RUNES Analytics Pro',
        'gamification-section': 'Gamifica√ß√£o | RUNES Analytics Pro',
        'alerts-section': 'Sistema de Alertas | RUNES Analytics Pro',
        'market-data-section': 'Dados de Mercado | RUNES Analytics Pro',
        'settings-section': 'Configura√ß√µes | RUNES Analytics Pro'
    };
    
    // Atualizar t√≠tulo da aba
    document.title = sectionTitles[sectionId] || 'RUNES Analytics Pro';
    
    // Atualizar t√≠tulo da p√°gina vis√≠vel (se existir um elemento para isso)
    const pageTitle = document.querySelector('.page-title');
    if (pageTitle) {
        pageTitle.textContent = sectionTitles[sectionId]?.split(' | ')[0] || 'RUNES Analytics Pro';
    }
    
    console.log(`üìù T√≠tulo da p√°gina atualizado: ${document.title}`);
}