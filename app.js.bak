// RUNES Analytics Pro - Aplica√ß√£o Principal
// Vers√£o simplificada sem m√≥dulos ES6 para garantir compatibilidade

// Estado global da aplica√ß√£o
const appState = {
    currentSection: 'dashboard',
    darkMode: true,
    selectedRune: 'ORDI',
    timeframe: '1D'
};
function formatCurrency(num) {
    if (num >= 1000000) {
        return `$${(num / 1000000).toFixed(1)}M`;
    } else if (num >= 1000) {
        return `$${(num / 1000).toFixed(1)}K`;
    } else {
        return `$${num.toFixed(2)}`;
    }
}
/**
 * Fun√ß√£o utilit√°ria para garantir que todos os containers necess√°rios existam
 * e criar aqueles que est√£o faltando
 */
function setupContainers() {
    console.log('Configurando containers da aplica√ß√£o...');
    
    // Lista de containers necess√°rios
    const requiredContainers = [
        { id: 'dashboard', title: 'Dashboard', icon: 'üìä' },
        { id: 'market-data', title: 'Dados de Mercado', icon: 'üìà' },
        { id: 'whale-tracking', title: 'Rastreador de Whales', icon: 'üêã' },
        { id: 'ranking', title: 'Ranking', icon: 'üèÜ' },
        { id: 'alerts', title: 'Sistema de Alertas', icon: 'üîî' },
        { id: 'sentiment', title: 'An√°lise de Sentimento', icon: 'üòä' }
    ];
    
    // Container principal que conter√° todas as se√ß√µes
    let mainContent = document.querySelector('main');
    if (!mainContent) {
        console.log('Container principal n√£o encontrado, criando um novo');
        mainContent = document.createElement('main');
        mainContent.className = 'main-content';
        document.body.appendChild(mainContent);
    }
    
    // Criar cada container que n√£o existe
    requiredContainers.forEach(container => {
        let section = document.getElementById(container.id);
        if (!section) {
            console.log(`Criando se√ß√£o ${container.id}...`);
            section = document.createElement('section');
            section.id = container.id;
            section.className = `section ${container.id}-section`;
            section.innerHTML = `
                <div class="section-header">
                    <div class="section-icon">${container.icon}</div>
                    <h2>${container.title}</h2>
                </div>
                <div class="section-content" id="${container.id}-content"></div>
            `;
            mainContent.appendChild(section);
        }
    });
    
    return true;
}

// Chamar esta fun√ß√£o logo no in√≠cio do DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
    // Configurar containers primeiro
    setupContainers();
    
    // Adicione estas linhas:
    // Criar container de alertas se n√£o existir
    let alertsContainer = document.getElementById('alerts-container');
    if (!alertsContainer) {
        console.log('Criando container de alertas...');
        alertsContainer = document.createElement('div');
        alertsContainer.id = 'alerts-container';
        alertsContainer.className = 'alerts-container';
        
        // Encontre onde inserir o container
        const alertsSection = document.getElementById('alerts') || 
                              document.querySelector('section[data-section="alerts"]') ||
                              document.querySelector('section');
        
        if (alertsSection) {
            alertsSection.appendChild(alertsContainer);
        } else {
            document.body.appendChild(alertsContainer);
        }
    }
    
    // Inicializar sistema de alertas
    initAlertsSystem();

    console.log('RUNES Analytics Pro inicializado');
    
    // Inicializar navega√ß√£o do sidebar
    initSidebarNavigation();
    
    // Adicionar eventos de clique diretamente nos links do menu (solu√ß√£o alternativa)
    setTimeout(function() {
        console.log('Aplicando solu√ß√£o alternativa para navega√ß√£o...');
        
        // Tenta v√°rios seletores para garantir que encontremos os links
        const menuLinks = document.querySelectorAll('.sidebar ul li a, .main-nav a, nav a');
        console.log(`Encontrados ${menuLinks.length} links de menu total`);
        
        menuLinks.forEach(function(link) {
            // Adicionar evento de clique diretamente
            link.onclick = function(e) {
                e.preventDefault();
                console.log('Link clicado via solu√ß√£o alternativa');
                
                const href = this.getAttribute('href');
                if (!href) return false;
                
                // Extrair o ID da se√ß√£o
                const targetId = href.startsWith('#') ? href.substring(1) : href;
                console.log(`Navegando para: ${targetId}`);
                
                // Atualizar links ativos
                menuLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // Mostrar a se√ß√£o correspondente
                toggleSections(targetId);
                
                return false;
            };
            
            console.log(`Link configurado (alt): ${link.textContent.trim()}`);
        });
    }, 500); // Pequeno delay para garantir que o DOM esteja totalmente carregado
    
    // Inicializar navega√ß√£o do cabe√ßalho (se existir)
    initHeaderNavigation();
    
    // Inicializar bot√µes de timeframe
    initTimeframeButtons();
    
    // Inicializar dashboard de dados
    updateDashboardMetrics();
    
    // Atualizar lista de top RUNES
    updateTopRunesList();
    
    // Criar gr√°fico mockup para o dashboard
    createMockChart();
});

// Dados globais para RUNES
const topRunes = [
    { ticker: 'ORDI', price: 21.56, change: 8.32 },
    { ticker: 'SATS', price: 0.000420, change: 3.2 },
    { ticker: 'PEPE', price: 0.0012, change: -5.8 }
];

// Fun√ß√£o utilit√°ria para garantir que cont√™ineres existam
function ensureContainer(id, className, parentSelector = 'body', createIfMissing = true) {
    let container = document.getElementById(id) || document.querySelector('.' + className);
    
    if (!container && createIfMissing) {
        console.log(`Criando cont√™iner ${id || className} pois n√£o foi encontrado`);
        container = document.createElement('div');
        if (id) container.id = id;
        if (className) container.className = className;
        
        const parent = document.querySelector(parentSelector) || document.body;
        parent.appendChild(container);
    }
    
    return container;
}


// Fun√ß√£o para formatar n√∫meros
function formatNumber(num) {
    return new Intl.NumberFormat('pt-BR').format(num);
}

// Adicione esta fun√ß√£o ao app.js se ela n√£o existir
function formatRunePrice(price) {
    if (!price) return '0.00 sats';
    
    const numPrice = typeof price === 'string' ? parseFloat(price) : price;
    
    // Converter para satoshis (1 BTC = 100,000,000 sats)
    const satPrice = numPrice < 1 ? numPrice * 100000000 : numPrice;
    
    if (satPrice < 0.01) return satPrice.toExponential(2) + ' sats';
    if (satPrice < 1) return satPrice.toFixed(5) + ' sats';
    if (satPrice < 10) return satPrice.toFixed(4) + ' sats';
    if (satPrice < 100) return satPrice.toFixed(3) + ' sats';
    if (satPrice < 1000) return satPrice.toFixed(2) + ' sats';
    return Math.round(satPrice) + ' sats';
}

// Inicializar navega√ß√£o da barra lateral
function initSidebarNavigation() {
    // Selecionar todos os links da sidebar sem utilizar seletores complexos
    const sidebarLinks = document.querySelectorAll('.sidebar a');
    
    console.log(`Encontrados ${sidebarLinks.length} links no menu lateral`);
    
    // Remover qualquer evento de clique existente e adicionar novos
    sidebarLinks.forEach(function(link) {
        // Remover eventos anteriores
        link.removeEventListener('click', handleMenuClick);
        
        // Adicionar novo evento de clique
        link.addEventListener('click', handleMenuClick);
        
        console.log(`Link configurado: ${link.textContent.trim()} -> ${link.getAttribute('href')}`);
    });
    
    console.log('Navega√ß√£o da barra lateral inicializada');
}

// Fun√ß√£o auxiliar para lidar com cliques no menu
function handleMenuClick(e) {
    e.preventDefault();
    
    console.log('Link do menu clicado:', this.textContent.trim());
    
    // Obter ID da se√ß√£o de destino
    const href = this.getAttribute('href');
    if (!href) return;
    
    const targetId = href.startsWith('#') ? href.substring(1) : href;
    console.log('Destino:', targetId);
    
    // Remover classe ativa de todos os links
    const allLinks = document.querySelectorAll('.sidebar a');
    allLinks.forEach(link => link.classList.remove('active'));
    
    // Adicionar classe ativa ao link clicado
    this.classList.add('active');
    
    // Usar nossa fun√ß√£o robusta de altern√¢ncia de se√ß√µes
    toggleSections(targetId);
    
    return false; // Prevenir comportamento padr√£o
}

// Inicializar navega√ß√£o do cabe√ßalho
function initHeaderNavigation() {
    const headerLinks = document.querySelectorAll('header nav a');
    
    headerLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Obter ID do destino
            const targetId = this.getAttribute('href').substring(1);
            
            // Atualizar links ativos
            headerLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
            
            // Mudar para a se√ß√£o selecionada
            changeActiveSection(targetId);
            
            console.log(`Menu de cabe√ßalho clicado: ${targetId}`);
        });
    });
}

// Mudar se√ß√£o ativa
function changeActiveSection(sectionId) {
    console.log(`Tentando mudar para a se√ß√£o: ${sectionId}`);
    
    // Atualizar estado da aplica√ß√£o
    appState.currentSection = sectionId;
    
    // Tentar v√°rias estrat√©gias para encontrar as se√ß√µes
    const sections = document.querySelectorAll('section');
    
    // Registrar se√ß√µes encontradas para debugging
    console.log(`Encontradas ${sections.length} se√ß√µes`);
    sections.forEach(section => {
        console.log(`Se√ß√£o encontrada: id=${section.id}, classes=${section.className}`);
    });
    
    // Esconder todas as se√ß√µes primeiro
    sections.forEach(section => {
        section.classList.remove('active');
        section.style.display = 'none';
    });
    
    // Mostrar a se√ß√£o alvo
    let targetSection = document.getElementById(sectionId);
    
    if (targetSection) {
        console.log(`Se√ß√£o encontrada com id=${sectionId}`);
        targetSection.classList.add('active');
        targetSection.style.display = 'block';
        
        // Inicializar componentes espec√≠ficos da se√ß√£o
        initSectionComponents(sectionId);
    } else {
        console.error(`‚ùå N√£o foi poss√≠vel encontrar a se√ß√£o ${sectionId} por nenhum m√©todo`);
        
        // Fallback: mostrar a primeira se√ß√£o se nenhuma for encontrada
        const firstSection = document.querySelector('section');
        if (firstSection) {
            console.log(`Mostrando primeira se√ß√£o dispon√≠vel como fallback: ${firstSection.id}`);
            firstSection.classList.add('active');
            firstSection.style.display = 'block';
        }
    }
}

// Inicializar componentes espec√≠ficos de cada se√ß√£o
function initSectionComponents(sectionId) {
    console.log(`Inicializando componentes para se√ß√£o: ${sectionId}`);
    
    switch(sectionId) {
        case 'dashboard':
        case 'overview':
            updateDashboardMetrics();
            break;
            
        case 'whales-tracking':
        case 'whale-tracking':
            initWhaleTracking();
            break;
            
        case 'ranking':
        case 'market-data':
            initRunesRanking();
            break;
            
        case 'sentiment':
        case 'analysis':
            initSentimentAnalysis();
            break;
            
        case 'alerts':
            initAlertsSystem();
            break;
            
        case 'mint-monitor':
            // Implementar quando necess√°rio
            break;
            
        case 'manipulation':
            // Implementar quando necess√°rio
            break;
    }
}

// Atualizar m√©tricas do dashboard
function updateDashboardMetrics() {
    // Dados mockup especificamente para RUNES
    const mockData = {
        volumeTotal: 187500000, // Volume de trading de RUNES
        volumeChange: 8.7,
        transactionCount: 283416, // Transa√ß√µes de RUNES
        transactionChange: 12.3,
        newMints: 895, // Novos mints de RUNES
        mintsChange: 5.8,
        sentiment: 76.4, // Sentimento geral para RUNES
        sentimentChange: 2.1,
        totalRunes: 628, // Total de tokens RUNES diferentes
        runesChange: 1.3,
        whaleActivity: 'Alto', // N√≠vel de atividade de whales
        whaleActivityChange: 3.9
    };
    
    // Tentar atualizar elementos por ID e classes
    updateElementContent('volume-value, #volume-24h', formatCurrency(mockData.volumeTotal));
    updateElementContent('volume-change, #volume-change', `${mockData.volumeChange > 0 ? '+' : ''}${mockData.volumeChange}%`);
    
    updateElementContent('tx-value, #transactions-24h', formatNumber(mockData.transactionCount));
    updateElementContent('tx-change, #transactions-change', `${mockData.transactionChange > 0 ? '+' : ''}${mockData.transactionChange}%`);
    
    updateElementContent('mints-value, #newMints', formatNumber(mockData.newMints));
    updateElementContent('mints-change', `${mockData.mintsChange > 0 ? '+' : ''}${mockData.mintsChange}%`);
    
    updateElementContent('sentiment-value', mockData.sentiment.toFixed(1));
    updateElementContent('sentiment-change', `${mockData.sentimentChange > 0 ? '+' : ''}${mockData.sentimentChange}%`);
    
    // Atualizar o t√≠tulo da se√ß√£o do gr√°fico principal
    updateElementContent('.chart-header h3', 'RUNES Market Overview');
}

// Fun√ß√£o auxiliar para atualizar conte√∫do
function updateElementContent(selectors, content) {
    const selectorList = selectors.split(',').map(s => s.trim());
    
    for (const selector of selectorList) {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = content;
            return; // Parar depois de encontrar o primeiro elemento
        }
    }
}

// Inicializar bot√µes de timeframe
function initTimeframeButtons() {
    const buttons = document.querySelectorAll('.timeframe-btn');
    
    buttons.forEach(button => {
        button.addEventListener('click', function() {
            buttons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const timeframe = this.textContent || this.getAttribute('data-interval');
            appState.timeframe = timeframe;
            
            console.log(`Timeframe alterado para: ${timeframe}`);
        });
    });
}

// Criar gr√°fico mockup
function createMockChart() {
    const chartContainers = document.querySelectorAll('#main-chart, #runesChart');
    
    chartContainers.forEach(container => {
        if (!container) {
            return;
        }
        
        console.log(`Criando gr√°fico para: ${container.id}`);
        
        // Limpar o container
        container.innerHTML = '';
        
        // Dados mockup para o gr√°fico
        const mockData = generateRandomData(30, 20, 2);
        
        // Criar canvas
        const canvas = document.createElement('canvas');
        container.appendChild(canvas);
        
        // Se Chart.js estiver dispon√≠vel, usar Chart.js
        if (typeof Chart !== 'undefined') {
            const ctx = canvas.getContext('2d');
            new Chart(ctx, {
            type: 'line',
            data: {
                    labels: Array.from({length: mockData.length}, (_, i) => i + 1),
                datasets: [{
                        label: 'Pre√ßo',
                        data: mockData,
                    borderColor: '#3498db',
                        backgroundColor: 'rgba(52, 152, 219, 0.1)',
                    tension: 0.4,
                        fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false
                    }
                }
            }
        });
        } else {
            // Fallback para canvas simples
            drawSimpleChart(canvas, mockData);
        }
    });
}

// Desenhar gr√°fico simples usando canvas
function drawSimpleChart(canvas, data) {
    canvas.width = canvas.parentElement.offsetWidth || 800;
    canvas.height = canvas.parentElement.offsetHeight || 400;
    
    const ctx = canvas.getContext('2d');
    const padding = 40;
    const chartWidth = canvas.width - (padding * 2);
    const chartHeight = canvas.height - (padding * 2);
    
    // Encontrar min/max
    const maxValue = Math.max(...data);
    const minValue = Math.min(...data);
    const valueRange = maxValue - minValue;
    
    // Desenhar eixos
    ctx.strokeStyle = '#444';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();
    
    // Desenhar dados
    ctx.strokeStyle = '#3498db';
    ctx.lineWidth = 2;
    ctx.beginPath();
    
    data.forEach((value, index) => {
        const x = padding + (chartWidth * (index / (data.length - 1)));
        const y = padding + chartHeight - (chartHeight * ((value - minValue) / valueRange));
        
        if (index === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    });
    
    ctx.stroke();
    
    // √Årea sob a linha
    ctx.beginPath();
    data.forEach((value, index) => {
        const x = padding + (chartWidth * (index / (data.length - 1)));
        const y = padding + chartHeight - (chartHeight * ((value - minValue) / valueRange));
        
        if (index === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    });
    
    ctx.lineTo(padding + chartWidth, canvas.height - padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.closePath();
    ctx.fillStyle = 'rgba(52, 152, 219, 0.1)';
    ctx.fill();
}

// Gerar dados aleat√≥rios
function generateRandomData(count, base = 100, volatility = 10) {
    const data = [];
    let value = base;
    
    for (let i = 0; i < count; i++) {
        value += (Math.random() - 0.5) * volatility;
        value = Math.max(value, 1); // Garantir valor positivo
        data.push(value);
    }
    
    return data;
}

// Inicializar Rastreador de Whales
function initWhaleTracking() {
    console.log('Inicializando Rastreador de Whales de RUNES...');
    
    // Procurar por v√°rios poss√≠veis containers
    const containers = [
        document.getElementById('whales-container'),
        document.getElementById('holders-graph'),
        document.querySelector('.whales-list'),
        document.querySelector('.whale-dashboard')
    ];
    
    // Encontrar o primeiro container v√°lido
    const container = containers.find(c => c !== null);
    
    if (!container) {
        console.error('Container para o Rastreador de Whales n√£o encontrado');
        return;
    }
    
    console.log(`Container para Whales encontrado: ${container.id || 'sem ID'}`);
    
    // Dados mockup para whales de RUNES (com endere√ßos no formato Bitcoin)
    const whalesData = [
        { address: 'bc1p3vr4...', token: 'DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON', balance: '132.8M', valueUSD: '$22.5M', change: '+2.7%', riskScore: 82, transactions: 28, lastActive: '1h' },
        { address: 'bc1q9zd8...', token: 'MAGIC‚Ä¢INTERNET‚Ä¢MONEY', balance: '85.2M', valueUSD: '$11.1M', change: '-1.3%', riskScore: 58, transactions: 12, lastActive: '3h' },
        { address: 'bc1qar0s...', token: 'NIKOLA‚Ä¢TESLA‚Ä¢GOD', balance: '26.5M', valueUSD: '$4.2M', change: '+0.8%', riskScore: 45, transactions: 7, lastActive: '5h' },
        { address: '1A1zP1eP...', token: 'CRAZY‚Ä¢THURSDAY', balance: '48.1M', valueUSD: '$19.7M', change: '+4.1%', riskScore: 76, transactions: 31, lastActive: '30m' },
        { address: 'bc1q6hk2...', token: 'GCM‚Ä¢BITCOIN‚Ä¢PARTNER', balance: '5.2M', valueUSD: '$21.8M', change: '-0.9%', riskScore: 63, transactions: 15, lastActive: '2h' }
    ];
    
    // Limpar container
    container.innerHTML = '';
    
    // Adicionar t√≠tulo da se√ß√£o
    const titleDiv = document.createElement('div');
    titleDiv.className = 'section-intro';
    titleDiv.innerHTML = `
        <h3>Rastreador de Whales de RUNES</h3>
        <p>Monitore os movimentos dos maiores detentores de tokens RUNES e identifique poss√≠veis manipula√ß√µes de mercado.</p>
    `;
    container.appendChild(titleDiv);
    
    // Criar tabela de whales se estivermos em um container de lista
    if (container.classList.contains('whales-list')) {
        const whalesTable = document.createElement('table');
        whalesTable.className = 'data-table';
        
        // Cabe√ßalho
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>Endere√ßo</th>
                <th>Token RUNE</th>
                <th>Saldo</th>
                <th>Valor (USD)</th>
                <th>Var. 24h</th>
                <th>Risco</th>
                <th>√öltima Atividade</th>
            </tr>
        `;
        
        // Corpo da tabela
        const tbody = document.createElement('tbody');
        
        whalesData.forEach(whale => {
            const row = document.createElement('tr');
            
            const changeClass = whale.change.startsWith('+') ? 'positive' : 'negative';
            
            // Determinar classe de risco
            let riskClass = 'low-risk';
            if (whale.riskScore > 70) {
                riskClass = 'high-risk';
            } else if (whale.riskScore > 40) {
                riskClass = 'medium-risk';
            }
            
            row.innerHTML = `
                <td class="address-cell">${whale.address}</td>
                <td>${whale.token}</td>
                <td>${whale.balance}</td>
                <td>${whale.valueUSD}</td>
                <td class="${changeClass}">${whale.change}</td>
                <td><span class="risk-badge ${riskClass}">${whale.riskScore}</span></td>
                <td>${whale.lastActive}</td>
            `;
            
            tbody.appendChild(row);
        });
        
        whalesTable.appendChild(thead);
        whalesTable.appendChild(tbody);
        container.appendChild(whalesTable);
    }
    // Criar cards visuais para cada whale
    else {
        const whalesGrid = document.createElement('div');
        whalesGrid.className = 'runes-grid';
        
        whalesData.forEach(whale => {
            const whaleCard = document.createElement('div');
            whaleCard.className = 'rune-card';
            
            const changeClass = whale.change.startsWith('+') ? 'positive' : 'negative';
            
            // Determinar classe de risco
            let riskClass = 'low-risk';
            if (whale.riskScore > 70) {
                riskClass = 'high-risk';
            } else if (whale.riskScore > 40) {
                riskClass = 'medium-risk';
            }
            
            whaleCard.innerHTML = `
                <div class="rune-card-header">
                    <div class="rune-card-symbol">üêã</div>
                    <div class="rune-card-title">
                        <h4>${whale.address}</h4>
                        <div class="rune-card-subtitle">${whale.token}</div>
                    </div>
                </div>
                
                <div class="rune-card-body">
                    <div class="rune-stat">
                        <div class="rune-stat-label">Saldo</div>
                        <div class="rune-stat-value">${whale.balance}</div>
                    </div>
                    <div class="rune-stat">
                        <div class="rune-stat-label">Valor (USD)</div>
                        <div class="rune-stat-value">${whale.valueUSD}</div>
                    </div>
                    <div class="rune-stat">
                        <div class="rune-stat-label">Var. 24h</div>
                        <div class="rune-stat-value ${changeClass}">${whale.change}</div>
                    </div>
                    <div class="rune-stat">
                        <div class="rune-stat-label">Risco</div>
                        <div class="rune-stat-value">
                            <span class="risk-badge ${riskClass}">${whale.riskScore}</span>
                        </div>
                    </div>
                </div>
                
                <div class="rune-card-footer">
                    <div>√öltima atividade: ${whale.lastActive}</div>
                    <div>${whale.transactions} transa√ß√µes</div>
                </div>
            `;
            
            whalesGrid.appendChild(whaleCard);
        });
        
        container.appendChild(whalesGrid);
        
        // Adicionar estat√≠sticas gerais
        const statsDiv = document.createElement('div');
        statsDiv.className = 'whales-stats-summary';
        statsDiv.innerHTML = `
            <div class="stats-header">
                <h3>Resumo de Atividade de Whales</h3>
            </div>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value">48.7%</div>
                    <div class="stat-label">Concentra√ß√£o dos Top 50 Holders</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">37.2M</div>
                    <div class="stat-label">Volume m√©dio por transa√ß√£o</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value high-risk">Alto</div>
                    <div class="stat-label">N√≠vel de Risco de Manipula√ß√£o</div>
                </div>
            </div>
        `;
        
        container.appendChild(statsDiv);
    }
}

// Fun√ß√£o para inicializar a se√ß√£o de ranking de RUNES
function initRunesRanking() {
    console.log('Verificando inicializa√ß√£o do RUNES Ranking');

    // N√£o inicializamos mais o componente aqui, pois isso √© feito pelo m√≥dulo ES6
    // Verificamos apenas se o container existe
    const container = document.getElementById('ranking-container');
    if (!container) {
        console.error('Container de ranking n√£o encontrado!');
        return;
    }
    
    // Se necess√°rio, podemos for√ßar uma atualiza√ß√£o do componente existente
    if (window.runesRanking) {
        console.log('Componente de ranking j√° inicializado pelo m√≥dulo ES6');
    } else {
        console.log('Aguardando inicializa√ß√£o do componente de ranking pelo m√≥dulo ES6');
    }
}

// Fun√ß√£o para atualizar a lista de top RUNES
function updateTopRunesList() {
    // Encontrar o container para a lista de RUNES
    const runesList = document.querySelector('.top-runes-list');
    if (!runesList) {
        console.error('Container .top-runes-list n√£o encontrado');
        return;
    }
    
    console.log('Atualizando lista de top RUNES...');
    
    // Limpar container
    runesList.innerHTML = '';
    
    // Verificar se temos os dados de topRunes
    if (!topRunes || !Array.isArray(topRunes) || topRunes.length === 0) {
        console.error('Dados de topRunes n√£o encontrados ou inv√°lidos');
        runesList.innerHTML = '<div class="error-message">Dados n√£o dispon√≠veis</div>';
        return;
    }
    
    // Pegar os primeiros 3 RUNES do array e criar elementos para cada um
    topRunes.slice(0, 3).forEach(function(rune) {
        const runeItem = document.createElement('div');
        runeItem.className = 'rune-item';
        
        // Criar elementos para nome, pre√ßo e varia√ß√£o
        runeItem.innerHTML = `
            <div class="rune-name">${rune.ticker}</div>
            <div class="rune-price">${formatCurrency(rune.price)}</div>
            <div class="rune-change ${rune.change > 0 ? 'positive' : 'negative'}">${rune.change > 0 ? '+' : ''}${rune.change}%</div>
        `;
        
        // Adicionar o item √† lista
        runesList.appendChild(runeItem);
    });
    
    console.log('Lista de top RUNES atualizada com sucesso');
}

// Inicializar An√°lise de Sentimento
function initSentimentAnalysis() {
    console.log('Inicializando An√°lise de Sentimento...');
    
    // Procurar por v√°rios poss√≠veis containers
    const containers = [
        document.getElementById('sentiment-container'),
        document.getElementById('sentiment-analysis'),
        document.querySelector('.sentiment-panel')
    ];
    
    // Encontrar o primeiro container v√°lido
    const container = containers.find(c => c !== null);
    
    if (!container) {
        console.error('Container para a An√°lise de Sentimento n√£o encontrado');
        return;
    }
    
    console.log(`Container para Sentimento encontrado: ${container.id || 'sem ID'}`);
    
    // Criar conte√∫do placeholder
    container.innerHTML = `
        <div class="sentiment-info-card">
            <h3>An√°lise de Sentimento</h3>
            <p>Insights sobre o sentimento do mercado de RUNES</p>
            <div class="sentiment-score">
                <div class="score-label">Sentimento Geral:</div>
                <div class="score-value positive">71.2</div>
            </div>
            <div class="sentiment-chart-placeholder">
                <p>Gr√°fico de Sentimento</p>
            </div>
                </div>
    `;
}

// Inicializar Sistema de Alertas
function initAlertsSystem() {
    console.log('Inicializando Sistema de Alertas...');
    
	    // Garantir que o container existe
    const alertsSection = document.getElementById('alerts');
    if (!alertsSection) {
        console.warn('Se√ß√£o de Alertas n√£o encontrada, criando uma nova');
        const mainContent = document.querySelector('main') || document.body;
        
        const newSection = document.createElement('section');
        newSection.id = 'alerts';
        newSection.className = 'alerts-section';
        mainContent.appendChild(newSection);
    }
    
    // Obter o container (existente ou rec√©m-criado)
    const container = document.getElementById('alerts') || document.body;
    
    // Configurar a se√ß√£o de alertas
    const alertsContent = `
        <div class="alerts-card">
            <h3>Sistema de Alertas de RUNES</h3>
            <p>Configure alertas personalizados para tokens RUNES</p>
            
            <div class="alerts-form">
                <div class="form-group">
                    <label>RUNE:</label>
                    <select class="select-styled" id="alert-rune-select">
                        <option value="DOG">DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON üêï</option>
                        <option value="MAGIC">MAGIC‚Ä¢INTERNET‚Ä¢MONEY üí∞</option>
                        <option value="NIKOLA">NIKOLA‚Ä¢TESLA‚Ä¢GOD ‚ö°</option>
                        <option value="CYPHER">CYPHER‚Ä¢GENESIS üîê</option>
                        <option value="BILLION">BILLION‚Ä¢DOLLAR‚Ä¢CAT üê±</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Condi√ß√£o:</label>
                    <select class="select-styled" id="alert-condition-select">
                        <option value="price-above">Pre√ßo acima de</option>
                        <option value="price-below">Pre√ßo abaixo de</option>
                        <option value="volume-above">Volume acima de</option>
                        <option value="volume-change">Varia√ß√£o de volume</option>
                        <option value="whale-activity">Atividade de Whale</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Valor:</label>
                    <input type="text" class="input-styled" id="alert-value" placeholder="Ex: 0.0020">
                </div>
                
                <div class="form-group">
                    <label>Notificar via:</label>
                    <div class="notification-options">
                        <label><input type="checkbox" checked> Email</label>
                        <label><input type="checkbox" checked> Browser</label>
                        <label><input type="checkbox"> Telegram</label>
                    </div>
                </div>
                
                <button class="btn-primary" id="add-alert-btn">Adicionar Alerta</button>
            </div>
            
            <div class="existing-alerts" id="alerts-list">
                <h4>Alertas Ativos</h4>
                <div class="alert-list">
                    <!-- Alertas ser√£o adicionados aqui -->
                </div>
            </div>
        </div>
    `;
    
    // Atualizar conte√∫do
    container.innerHTML = alertsContent;
    
    // Adicionar event listeners
    const addButton = document.getElementById('add-alert-btn');
    if (addButton) {
        addButton.addEventListener('click', function() {
            addNewAlert();
        });
    }
    
    // Adicionar alguns alertas de exemplo
    addSampleAlerts();
}

// Fun√ß√£o auxiliar para adicionar um novo alerta
function addNewAlert() {
    const runeSelect = document.getElementById('alert-rune-select');
    const conditionSelect = document.getElementById('alert-condition-select');
    const valueInput = document.getElementById('alert-value');
    
    if (!runeSelect || !conditionSelect || !valueInput) {
        console.error('Elementos do formul√°rio de alerta n√£o encontrados');
        return;
    }
    
    const alertValue = valueInput.value;
    const alertRune = runeSelect.options[runeSelect.selectedIndex].text;
    const alertCondition = conditionSelect.options[conditionSelect.selectedIndex].text;
    
    if (!alertValue) {
        alert('Por favor, insira um valor para o alerta');
        return;
    }
    
    const alertList = document.querySelector('.alert-list');
    if (alertList) {
        const newAlert = document.createElement('div');
        newAlert.className = 'alert-item';
        newAlert.innerHTML = `
            <div class="alert-icon">üîî</div>
            <div class="alert-details">
                <div class="alert-title">${alertRune}</div>
                <div class="alert-condition">${alertCondition} ${alertValue}</div>
            </div>
            <button class="btn-remove">Remover</button>
        `;
        
        // Adicionar evento ao bot√£o remover
        const removeBtn = newAlert.querySelector('.btn-remove');
        if (removeBtn) {
            removeBtn.addEventListener('click', function() {
                newAlert.remove();
            });
        }
        
        alertList.appendChild(newAlert);
        
        // Limpar input
        valueInput.value = '';
    }
}

// Fun√ß√£o para adicionar alguns alertas de exemplo
function addSampleAlerts() {
    const alertList = document.querySelector('.alert-list');
    if (!alertList) return;
    
    const sampleAlerts = [
        { rune: 'DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON üêï', condition: 'Pre√ßo acima de', value: '0.0020 sats' },
        { rune: 'MAGIC‚Ä¢INTERNET‚Ä¢MONEY üí∞', condition: 'Volume acima de', value: '$30M' }
    ];
    
    sampleAlerts.forEach(alert => {
        const alertItem = document.createElement('div');
        alertItem.className = 'alert-item';
        alertItem.innerHTML = `
            <div class="alert-icon">üîî</div>
            <div class="alert-details">
                <div class="alert-title">${alert.rune}</div>
                <div class="alert-condition">${alert.condition} ${alert.value}</div>
            </div>
            <button class="btn-remove">Remover</button>
        `;
        
        // Adicionar evento ao bot√£o remover
        const removeBtn = alertItem.querySelector('.btn-remove');
        if (removeBtn) {
            removeBtn.addEventListener('click', function() {
                alertItem.remove();
            });
        }
        
        alertList.appendChild(alertItem);
    });
}

    // Procurar por v√°rios poss√≠veis containers
    const containers = [
        document.getElementById('alerts-container'),
        document.getElementById('alerts-panel'),
        document.querySelector('.alerts-section')
    ];
    
    // Encontrar o primeiro container v√°lido
    const container = containers.find(c => c !== null);
    
    if (!container) {
        console.error('Container para o Sistema de Alertas n√£o encontrado');
        return;
    }
    
    console.log(`Container para Alertas encontrado: ${container.id || 'sem ID'}`);
    
    // Criar conte√∫do placeholder
    container.innerHTML = `
        <div class="alerts-card">
            <h3>Sistema de Alertas de RUNES</h3>
            <p>Configure alertas personalizados para movimentos de pre√ßo, volume e atividade de whales para tokens RUNES</p>
            <div class="alerts-form">
                <div class="form-group">
                    <label>RUNE:</label>
                    <select class="select-styled">
                        <option value="DOG">DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON üêï</option>
                        <option value="MAGIC">MAGIC‚Ä¢INTERNET‚Ä¢MONEY üí∞</option>
                        <option value="NIKOLA">NIKOLA‚Ä¢TESLA‚Ä¢GOD ‚ö°</option>
                        <option value="CYPHER">CYPHER‚Ä¢GENESIS üîê</option>
                        <option value="BILLION">BILLION‚Ä¢DOLLAR‚Ä¢CAT üê±</option>
                        <option value="GCM">GCM‚Ä¢BITCOIN‚Ä¢PARTNER ü§ù</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Condi√ß√£o:</label>
                    <select class="select-styled">
                        <option value="price-above">Pre√ßo acima de</option>
                        <option value="price-below">Pre√ßo abaixo de</option>
                        <option value="volume-above">Volume acima de</option>
                        <option value="volume-change">Varia√ß√£o de volume</option>
                        <option value="whale-activity">Atividade de Whale</option>
                        <option value="sentiment-change">Mudan√ßa de sentimento</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Valor:</label>
                    <input type="text" class="input-styled" placeholder="Ex: 0.0020">
                </div>
                <div class="form-group">
                    <label>Notificar via:</label>
                    <div class="notification-options">
                        <label><input type="checkbox" checked> Email</label>
                        <label><input type="checkbox" checked> Browser</label>
                        <label><input type="checkbox"> Telegram</label>
                    </div>
                </div>
                <button class="btn-primary">Adicionar Alerta</button>
            </div>
            
            <div class="existing-alerts">
                <h4>Alertas Ativos</h4>
                <div class="alert-list">
                    <div class="alert-item">
                        <div class="alert-icon">üîî</div>
                        <div class="alert-details">
                            <div class="alert-title">DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON üêï</div>
                            <div class="alert-condition">Pre√ßo acima de 0.0020 sats</div>
                        </div>
                        <button class="btn-secondary btn-small">Remover</button>
                    </div>
                    <div class="alert-item">
                        <div class="alert-icon">üîî</div>
                        <div class="alert-details">
                            <div class="alert-title">MAGIC‚Ä¢INTERNET‚Ä¢MONEY üí∞</div>
                            <div class="alert-condition">Volume acima de $30M</div>
                        </div>
                        <button class="btn-secondary btn-small">Remover</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Adicionar eventos para os bot√µes
    const addButton = container.querySelector('.btn-primary');
    if (addButton) {
        addButton.addEventListener('click', function() {
            const alertValue = container.querySelector('.input-styled').value;
            const alertRune = container.querySelector('select').options[container.querySelector('select').selectedIndex].text;
            const alertCondition = container.querySelector('select:nth-of-type(2)').options[container.querySelector('select:nth-of-type(2)').selectedIndex].text;
            
            if (alertValue) {
                const alertList = container.querySelector('.alert-list');
                const newAlert = document.createElement('div');
                newAlert.className = 'alert-item';
                newAlert.innerHTML = `
                    <div class="alert-icon">üîî</div>
                    <div class="alert-details">
                        <div class="alert-title">${alertRune}</div>
                        <div class="alert-condition">${alertCondition} ${alertValue}</div>
                    </div>
                    <button class="btn-secondary btn-small">Remover</button>
                `;
                
                // Adicionar evento ao bot√£o remover
                const removeBtn = newAlert.querySelector('.btn-secondary');
                removeBtn.addEventListener('click', function() {
                    newAlert.remove();
                });
                
                alertList.appendChild(newAlert);
                
                // Limpar input
                container.querySelector('.input-styled').value = '';
            }
        });
    }
    
    // Adicionar eventos para os bot√µes de remover existentes
    const removeButtons = container.querySelectorAll('.alert-item .btn-secondary');
    removeButtons.forEach(button => {
        button.addEventListener('click', function() {
            this.closest('.alert-item').remove();
        });
    });
}

// Melhorar fun√ß√£o toggleSections para garantir que funcione corretamente
function toggleSections(sectionId) {
    console.log('Mudando para a se√ß√£o:', sectionId);
    
    // Esconder todas as se√ß√µes primeiro
    const allSections = document.querySelectorAll('section.section');
    allSections.forEach(section => {
        section.style.display = 'none';
        section.classList.remove('active');
    });
    
    // Mostrar a se√ß√£o solicitada
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.style.display = 'block';
        targetSection.classList.add('active');
        console.log('Se√ß√£o ativada:', sectionId);
        
        // Inicializar componentes espec√≠ficos da se√ß√£o
        initSectionComponents(sectionId);
        
        // Atualizar o estado da aplica√ß√£o
        appState.currentSection = sectionId;
    } else {
        console.error('Se√ß√£o n√£o encontrada:', sectionId);
        
        // Fallback para o dashboard se a se√ß√£o n√£o for encontrada
        const dashboardSection = document.getElementById('dashboard');
        if (dashboardSection) {
            dashboardSection.style.display = 'block';
            dashboardSection.classList.add('active');
            appState.currentSection = 'dashboard';
        }
    }
}

// Limpar recursos e listeners quando o componente √© destru√≠do
function destroyRunesRanking() {
    console.log('Destruindo componente RunesRanking...');
    
    // Remover event listeners para evitar memory leaks
    const metricSelect = document.getElementById('metric-select');
    const sortAscBtn = document.getElementById('sort-asc');
    const sortDescBtn = document.getElementById('sort-desc');
    const tableViewBtn = document.getElementById('table-view');
    const gridViewBtn = document.getElementById('grid-view');
    
    if (metricSelect) metricSelect.removeEventListener('change', window.handleMetricChange);
    if (sortAscBtn) sortAscBtn.removeEventListener('click', window.handleSortAsc);
    if (sortDescBtn) sortDescBtn.removeEventListener('click', window.handleSortDesc);
    if (tableViewBtn) tableViewBtn.removeEventListener('click', window.handleTableView);
    if (gridViewBtn) gridViewBtn.removeEventListener('click', window.handleGridView);
    
    // Limpar quaisquer timers ou WebSockets
    if (window.realtimeInterval) {
        clearInterval(window.realtimeInterval);
        window.realtimeInterval = null;
    }
}
